# Generated by Django 5.1.5 on 2025-02-14 08:02

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(blank=True, max_length=150, verbose_name='username')),
                ('email', models.EmailField(max_length=150, unique=True, verbose_name='email')),
                ('nickname', models.CharField(default='굴비', error_messages={'unique': '이미 존재하는 닉네임입니다.'}, max_length=100, unique=True, verbose_name='닉네임')),
                ('sex', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], default='M', max_length=1)),
                ('birth_date', models.DateField(default='2000-01-01')),
                ('career', models.PositiveSmallIntegerField(choices=[(1, '학생'), (2, '대학(원)생'), (3, '취업준비생'), (4, '직장인'), (5, '주부'), (6, '프리랜서')], default=1)),
                ('total_saving', models.PositiveIntegerField(default=0)),
                ('introduction', models.TextField(blank=True, null=True)),
                ('profile_image', models.CharField(default=0, max_length=255, null=True)),
                ('create_at', models.DateTimeField(auto_now_add=True)),
                ('social_login', models.CharField(default=0, max_length=255, null=True)),
                ('challenge_streak', models.PositiveSmallIntegerField(default=0)),
                ('is_superuser', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '사용자',
                'verbose_name_plural': '사용자들',
                'db_table': 'User',
            },
        ),
        migrations.CreateModel(
            name='UserChallengeCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cafe', models.BooleanField(default=0)),
                ('restaurant', models.BooleanField(default=0)),
                ('grocery', models.BooleanField(default=0)),
                ('shopping', models.BooleanField(default=0)),
                ('culture', models.BooleanField(default=0)),
                ('hobby', models.BooleanField(default=0)),
                ('drink', models.BooleanField(default=0)),
                ('transportation', models.BooleanField(default=0)),
                ('etc', models.BooleanField(default=0)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='challenge_category', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'UserChallengeCategory',
            },
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following', to=settings.AUTH_USER_MODEL)),
                ('following', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'Follow',
                'unique_together': {('follower', 'following')},
            },
        ),
    ]
