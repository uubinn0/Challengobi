"""
Django settings for sns project.

Generated by 'django-admin startproject' using Django 3.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# .env 파일 설정
env = environ.Env()
environ.Env.read_env(os.path.join(BASE_DIR, ".env"))

# FastAPI 서버 URL
FASTAPI_URL = os.getenv("FASTAPI_URL", "http://fastapi-app:8001")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-^_l)cbv!^9zhdhapot6o_o5(c+zqcbn9p58oa1fhlc#th)s8^)"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# database definition
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': 'ssafy-sns',
#         'USER': 'ssafy',
#         'PASSWORD': 'ssafy1234!',
#         'HOST': '127.0.0.1',
#         'PORT': '3306',
#     }
# }
# 환경 변수로부터 데이터베이스 설정 읽기
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",  # MariaDB 사용
        "NAME": os.environ.get("DJANGO_DB_NAME", "mydb"),  # 환경변수에서 DB 이름 읽기
        "USER": os.environ.get("DJANGO_DB_USER", "user"),  # 환경변수에서 DB 유저 읽기
        "PASSWORD": os.environ.get(
            "DJANGO_DB_PASSWORD", "password"
        ),  # 환경변수에서 DB 비밀번호 읽기
        "HOST": os.environ.get(
            "DJANGO_DB_HOST", "mariadb"
        ),  # 환경변수에서 DB 호스트 읽기
        "PORT": os.environ.get("DJANGO_DB_PORT", "3306"),  # 환경변수에서 DB 포트 읽기
    }
}

# MongoDB 환경 설정 (FastAPI에서 MongoDB를 사용하는 경우)
# MONGO_HOST = os.environ.get("MONGO_HOST", "mongodb")
# MONGO_PORT = os.environ.get("MONGO_PORT", "27017")

# Firebase 설정
FIREBASE_CONFIG = {
    "apiKey": env("VITE_FIREBASE_API_KEY"),
    "authDomain": env("VITE_FIREBASE_AUTH_DOMAIN"),
    "projectId": env("VITE_FIREBASE_PROJECT_ID"),
    "storageBucket": env("VITE_FIREBASE_STORAGE_BUCKET"),
    "messagingSenderId": env("VITE_FIREBASE_MESSAGING_SENDER_ID"),
    "appId": env("VITE_FIREBASE_APP_ID"),
    "measurementId": env("VITE_FIREBASE_MEASUREMENT_ID"),
}

# Firebase Storage 버킷 설정
FIREBASE_STORAGE_BUCKET = env("VITE_FIREBASE_STORAGE_BUCKET")

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "drf_yasg",  # drf_yasg
    "rest_framework",  # djangorestframework
    "corsheaders",
    "accounts",
    "badges",
    "challenges",
    "notifications",
    "posts",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "sns.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "sns.wsgi.application"


REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        # "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.BasicAuthentication",
    ),
}

# JWT_AUTH = {
#     'JWT_SECRET_KEY': SECRET_KEY,
#     'JWT_ALGORITHM': 'HS256',
#     'JWT_ALLOW_REFRESH': True,
#     'JWT_EXPIRATION_DELTA': timedelta(days=7),
#     'JWT_REFRESH_EXPIRATION_DELTA': timedelta(days=28),
# }

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=7),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=28),
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
}

SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {
        "JWT": {"type": "apiKey", "name": "Authorization", "in": "header"}
    },
    "USE_SESSION_AUTH": True,
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


CORS_ALLOWED_ORIGINS = [
    "http://localhost:8000",
]

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]


APPEND_SLASH = False

CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "ko-kr"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

AUTH_USER_MODEL = "accounts.User"
STATIC_URL = "/static/"

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Media files
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
